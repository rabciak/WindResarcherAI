name: CI/CD - Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ================================
  # Backend Linting and Tests
  # ================================
  backend-lint:
    name: Backend - Lint (Python)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -r requirements.txt

      - name: Run Black (code formatter check)
        working-directory: ./backend
        run: black --check --diff app/

      - name: Run isort (import sorting check)
        working-directory: ./backend
        run: isort --check-only --diff app/

      - name: Run Flake8 (linting)
        working-directory: ./backend
        run: flake8 app/ --max-line-length=120 --exclude=__pycache__,venv

  backend-test:
    name: Backend - Tests (pytest)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r requirements.txt

      - name: Run pytest
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          mkdir -p tests
          if [ -d "tests" ] && [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
            pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
          else
            echo "‚ö†Ô∏è  WARNING: No tests found in backend/tests/"
            echo "Production deployments should have comprehensive test coverage"
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ================================
  # Frontend Linting and Build
  # ================================
  frontend-lint:
    name: Frontend - Lint (ESLint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

  frontend-build:
    name: Frontend - Build (TypeScript + Vite)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build production bundle
        working-directory: ./frontend
        env:
          VITE_API_URL: https://api.windnews.rabciak.site
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-prod
          path: frontend/dist/
          retention-days: 30

  # ================================
  # Docker Build
  # ================================
  docker-build:
    name: Docker - Build Production Images
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-test, frontend-lint, frontend-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: windnewsmapper-backend:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image (production)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: false
          tags: windnewsmapper-frontend:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ================================
  # Create Release Tag
  # ================================
  create-release:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from latest tag
        id: get_version
        run: |
          # Get the latest tag or default to v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Increment patch version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ steps.get_version.outputs.new_version }} -m "Release ${{ steps.get_version.outputs.new_version }}"
          git push origin ${{ steps.get_version.outputs.new_version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.new_version }}
          release_name: Release ${{ steps.get_version.outputs.new_version }}
          body: |
            ## Changes in this Release

            üöÄ Automated release from main branch

            ### Deployment
            - Production: https://windnews.rabciak.site
            - API: https://api.windnews.rabciak.site

            For detailed changes, see the commit history.
          draft: false
          prerelease: false

  # ================================
  # Deploy to Production
  # ================================
  deploy-prod:
    name: Deploy to Production (windnews.rabciak.site)
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://windnews.rabciak.site

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "üöÄ Deploying to PRODUCTION environment..."
          echo "‚ö†Ô∏è  Deployment to OVH not yet configured"
          echo "üìù TODO: Configure SSH access and deployment scripts"

      # Uncomment when OVH deployment is ready
      # - name: Deploy to OVH via SSH
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.PROD_SERVER_HOST }}
      #     username: ${{ secrets.PROD_SERVER_USER }}
      #     key: ${{ secrets.PROD_SERVER_SSH_KEY }}
      #     script: |
      #       cd /opt/windnewsmapper
      #       git pull origin main
      #       docker-compose -f docker-compose.prod.yml pull
      #       docker-compose -f docker-compose.prod.yml up -d --build
      #       docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head

      # - name: Health check
      #   run: |
      #     sleep 15
      #     curl -f https://windnews.rabciak.site/health || exit 1
      #     curl -f https://api.windnews.rabciak.site/health || exit 1

      # - name: Rollback on failure
      #   if: failure()
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.PROD_SERVER_HOST }}
      #     username: ${{ secrets.PROD_SERVER_USER }}
      #     key: ${{ secrets.PROD_SERVER_SSH_KEY }}
      #     script: |
      #       cd /opt/windnewsmapper
      #       git reset --hard HEAD~1
      #       docker-compose -f docker-compose.prod.yml up -d --build
